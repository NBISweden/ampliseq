/*
 * -------------------------------------------------
 *  nf-core/ampliseq Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  withName: classifier_extract_seq {
    cpus = { check_max (1 * task.attempt, 'cpus' ) }
    memory = { check_max (42.GB * task.attempt, 'memory' ) }
    time = { check_max (12.h * task.attempt, 'time' ) }
  }

  withName: classifier_train {
    cpus = { check_max (1 * task.attempt, 'cpus' ) }
    memory = { check_max (42.GB * task.attempt, 'memory' ) }
    time = { check_max (12.h * task.attempt, 'time' ) }
  }

  //you can limit memory by typing --max_memory in the command stream, e.g. --max_memory 63.GB
  withName: classifier {
    cpus = { check_max (20 * task.attempt, 'cpus' ) }
    memory = { check_max (120.GB * task.attempt, 'memory' ) }
    time = { check_max (36.h * task.attempt, 'time' ) }
  }

  withName: dada_single {
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' ) }
  }
  withName: dada_multi {
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' ) }
  }
  withName: dada_pacBio {
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' ) }
  }
  withName: tree {
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (24.GB * task.attempt, 'memory' ) }
    time = { check_max (4.h * task.attempt, 'time' ) }
  }
  withName: ancom_asv {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (16.GB * task.attempt, 'memory' ) }
    time = { check_max (8.h * task.attempt, 'time' ) }
  }
  withName: ancom_tax {
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (16.GB * task.attempt, 'memory' ) }
    time = { check_max (2.h * task.attempt, 'time' ) }
  }
  withName: get_software_versions {
    cache = false
  }
  
}
